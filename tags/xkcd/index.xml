<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xkcd on Arthur Rocha</title>
    <link>/tags/xkcd/</link>
    <description>Recent content in xkcd on Arthur Rocha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 24 Apr 2019 12:03:06 -0300</lastBuildDate>
    
	<atom:link href="/tags/xkcd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Xkcd to Make Density Plots</title>
      <link>/post/2019-04-24-using-xkcd-to-make-density-plots/</link>
      <pubDate>Wed, 24 Apr 2019 12:03:06 -0300</pubDate>
      
      <guid>/post/2019-04-24-using-xkcd-to-make-density-plots/</guid>
      <description>So, I’ve always been interesting in the “xkcd type” of figures only because IT’S FUN.
My goal here is to make density plots of the most common probability functions using the xkcd style.
First of all, we will need to load these packages:library(xkcd)library(dplyr)library(ggplot2)Now, we do a function using the ggplot2 sintax to make the plot. Note that we need calculate the axes ranges and apply “jitter” to x and y to create a hand-drawn effect in the line.xkcd_density = function(x,y){# Calcule the axis rangexrange = range(x)yrange = range(y)# Plot line type + jitterqplot(jitter(x),jitter(y),geom = &amp;quot;blank&amp;quot;)+geom_line(linetype = 1,size=1.5)+theme_xkcd()+xkcdaxis(xrange,yrange)+xlab(&amp;quot;&amp;quot;)+ylab(&amp;quot;&amp;quot;)}Ploting the standart normal (0,1) density.x = seq(-3,3,by=.1)y = dnorm(x,mean=0,sd=1)xkcd_density(x,y)Ploting the Chi square (df = 3) density.x = c(0,seq(0.1,10,by=.1))y = c(0,dchisq(x[-1],df=3))xkcd_density(x,y)There you have! A nice looking (sort of) xkcd density plot!</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cool stuff on Arthur Rocha</title>
    <link>/categories/cool-stuff/</link>
    <description>Recent content in Cool stuff on Arthur Rocha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 24 May 2019 12:03:06 -0300</lastBuildDate>
    
	<atom:link href="/categories/cool-stuff/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solving the Birthday Paradox</title>
      <link>/post/2019-05-24-solving-the-birthday-paradox/</link>
      <pubDate>Fri, 24 May 2019 12:03:06 -0300</pubDate>
      
      <guid>/post/2019-05-24-solving-the-birthday-paradox/</guid>
      <description>IntroductionIf you ever had a probability course, it’s probably that you had to solve the birthday paradox (also called as the birthday problem) or had heard of it at least.
The birthday paradox consists of measuring the probability of at least 2 persons in a room, with n &amp;lt; 365 persons, were born on the same day (\(p(n)\)).To calculate this is necessary to make the assumptions that are 365 possibilities of days and each day has the same probability of being a birthday.Thinking on the complementary probability \(p^c(n)\)(probability of none of the persons had born on the same day), after some inspiration you get:
\(p^c(n) = 1 \times (1 - \frac{1}{365}) \times (1 - \frac{2}{365}) \times ... \times (1 - \frac{n-1}{365}) = \frac{365!}{365^n(365-n)!}\)
With more inspiration and some free time you can see that it can be approximated, by a Taylor expansion to:
\(p^c(n) \approx e^{-(n(n-1)) / 2 \times 365}\)
And then:
\(p(n) = 1 - p^c(n) \approx 1 - e^{-(n(n-1)) / 2 \times 365}\)
But … What if you don’t want to do all the math by hand? Well, you can always (not always, but you get the point) simulate!So let’s do that in R!</description>
    </item>
    
    <item>
      <title>How many rounds on top are necessary to be a soccer champion?</title>
      <link>/post/2019-04-24-how-many-rounds-on-top-to-glory/</link>
      <pubDate>Wed, 24 Apr 2019 12:03:06 -0300</pubDate>
      
      <guid>/post/2019-04-24-how-many-rounds-on-top-to-glory/</guid>
      <description>IntroductionLike almost everyone here in Brazil, I have a passion for football (or soccer) and because of that my father and I are always alert to the national championship.
So, a few days ago my father gave me a challenge, he challenged me to understand what is needed to be a champion in the brazilian national soccer league (knowed here as “Brasileirão”) since the competition change its format to a point based championship in 2003.Thus I’ve accepted the challenge and here are the results:
DataFirstly we need to get the data!!I haven’t found a well structured data base to work with, so I had to work with the information provided by this site andI had to do a function to scrap the data.
Packages usedlibrary(XML) #Package to do web scrapinglibrary(dplyr) #Manipulationlibrary(magrittr) #Manipulationlibrary(tidyr) #Manipulationlibrary(scales) #Formattinglibrary(ggplot2) #Plotslibrary(pROC) #ROC curvesThat is the function to do the web scraping. Note that the site has information only until 2015.# URL base to all yearsurl1=&amp;quot;futpedia.globo.com/campeonato/campeonato-brasileiro/&amp;quot;#Empty data frame to store the informationgames= data_frame()for (i in 2003:2015) { ## yearsurl2 = paste0(url1,i)readHTMLTable(url2,as.</description>
    </item>
    
  </channel>
</rss>